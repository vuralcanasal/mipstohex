
public class Jtype extends Instruction{
	
	private String target;		// instruction[24-0]

	public String JtypeInteractionConverter(LookupTable lookupTable, String operand, String[] target, int operandIndex, String startPoint) {
		if (target.length != 1)
			return "Error: Too many arguments";
		else {
			this.target = target[0];
			// find target value
			boolean sign;
			//checking if target is negative or positive
			if (this.target.charAt(0) == '-') {
				//this.target = this.target.substring(1);
				sign = false;
			}
			else
				sign = true;
			try {
				int intTarget=Integer.parseInt(this.target);
				this.target = Integer.toBinaryString(intTarget);	
	    	
			}catch (Exception e) {
					return "Error: Target number";
			}
			int bits = Integer.parseInt(this.target, 2);
			String shiftedi = Integer.toBinaryString(bits<<1);
			System.out.println(shiftedi);
			this.target = addBinary(startPoint, this.target);
			System.out.println(this.target);
			// check Positive target
			if((this.target.length()>26) && (sign))
				return "Posivite target cannot be bigger than 26 bits";			
			// check Negative target
			else if((this.target.length()>25) && (!sign))
				return "Negative target cannot be bigger than 25 bits";
			// if immediate number is valid
			else {
				char[] targ = new char[26];
				int j=1;
				for(int i = 25; i > -1 ; i--)
				{
					int len = this.target.length()-j;
					//Fulfilling positive immediate to 16bits
					if(sign){
						if(len > -1) {
							targ[i] = this.target.charAt(len);
						}
						else
							targ[i]='0';
						j++;
					}
					//Fulfilling negative immediate to 16bits
					else{
						if(len > -1) {
							targ[i] = this.target.charAt(len);
						}
						else{
							if (i == 0)
								targ[i]='1';
							else
								targ[i]='0';
						}
						j++;
					}
				}
				this.target = new String(targ);
				
				// set opcode and target address
				
				this.setOpcode(lookupTable.opcodes.get(operandIndex));
				System.out.println(this.target);
			}
		}
		
		
		
		
		return this.getMachine();
	}	
	
	String addBinary(String a, String b) 
    {
        // Initialize result 
        String result = "";  
          
        // Initialize digit sum 
        int s = 0;          
  
        // Traverse both strings starting  
        // from last characters 
        int i = a.length() - 1, j = b.length() - 1; 
        while (i >= 0 || j >= 0 || s == 1) 
        { 
              
            // Comput sum of last  
            // digits and carry 
            s += ((i >= 0)? a.charAt(i) - '0': 0); 
            s += ((j >= 0)? b.charAt(j) - '0': 0); 
  
            // If current digit sum is  
            // 1 or 3, add 1 to result 
            result = (char)(s % 2 + '0') + result; 
  
            // Compute carry 
            s /= 2; 
  
            // Move to next digits 
            i--; j--; 
        } 
          
        return result; 
    }
	
	// set and get functions
	public String getTarget() {
		return target;
	}

	public void setTarget(String target) {
		this.target = target;
	}

	
}
