import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;



public class Batch {
	ArrayList<String> labels = new ArrayList<String>();
	ArrayList<Integer> labelsLines = new ArrayList<Integer>();
	ArrayList<String> sourceCode = new ArrayList<String>();
	ArrayList<String> operand = new ArrayList<String>();
	ArrayList<String> restCommand = new ArrayList<String>();
	
	public String createObjFile(LookupTable lookupTable, String inputSourcePath, String outputObjPath, String startPoint) {
		// if there is any error for converting, flag return true
		boolean Error = false;
		
		readSourceFile(inputSourcePath);
		
		for(int i = 0; i < operand.size(); i ++) {
			
			// find the operand from the lookupTable
			int operandIndex = -1;
			for(int j = 0; j<lookupTable.instructions.size();j++)
			{
				if(operand.get(i).equals(lookupTable.instructions.get(j)))
				{
					operandIndex = j;
					break;
				}
			}
			
			// if the operand is found in the lookup table
			if (operandIndex != -1)
			{
				// if the operand type is 'R'
				if (lookupTable.types.get(operandIndex).equals("R")) {
					String converted = new Rtype().RtypeConverter(lookupTable, operand.get(i), restCommand.get(i), operandIndex); // tokens[0] means operand
					
				}
				// if the operand type is 'I'
				else if (lookupTable.types.get(operandIndex).equals("I")) {
					String converted = new Itype().ItypeInteractionConverter(lookupTable, operand.get(i), restCommand.get(i), operandIndex); // tokens[0] means operand
					message.setText(msg);
				}
				// if the operand type is 'J'
				else if (lookupTable.types.get(operandIndex).equals("J")) {
					String converted = new Jtype().JtypeInteractionConverter(lookupTable, operand.get(i), restCommand.get(i), operandIndex, startPoint); // tokens[0] means operand
					message.setText(msg);
				}
				else {
					message.setText("The type is unknown");
				}
			}
			// if the operand is not in the lookup table
			else
				message.setText("The operand is unknown");	
		
		}
		// if the user input has wrong syntax
		else
			message.setText("Syntax error");
	}
		}
		
		
		if(Error)
			return "The object is created with some ERROR";
		else
			return "The object is created successfully";
	}

	private void readSourceFile(String inputSourcePath) {
		int indexLabel = -1;
		Scanner scanner = null;
		// read source file
		try {
			scanner = new Scanner(new File(inputSourcePath));
		
			//First read all the lines for detecting label names and corresponding index.
			while (scanner.hasNextLine()) {	
				indexLabel++;
				String line = scanner.nextLine().trim();
				boolean isLabel = false;
				int i = 1;
				for(; i <line.length(); i++) {
					if(line.charAt(line.length() - i) == ':') {
						isLabel = true;
						break;
					}
					else isLabel = false;
				}
				if(isLabel) {
					labels.add(line.substring(0,line.length()-i));
					sourceCode.add((line.substring(line.length()-i+1,line.length())));
					labelsLines.add(indexLabel);
				}
				else
					sourceCode.add(line);
			}
			
			}catch (FileNotFoundException e) {
			e.printStackTrace();
			}
		
		// create operand and rest in the command
		for (int i = 0; i < sourceCode.size(); i++) {
			sourceCode.set(i, sourceCode.get(i).trim());
			String[] code = sourceCode.get(i).split("\\s",2);
			operand.add(code[0]);
			restCommand.add(code[1].replaceAll(" ", ""));
		} 
	}// end of the reading
		
	

}